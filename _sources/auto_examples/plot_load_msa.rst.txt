
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_load_msa.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_load_msa.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_load_msa.py:


Compute SCA coevolution matrix
===============================

A small example that shows how to load and filter an MSA, compute positional
and joint amino acid frequencies and finally, compute the SCA coevolution
matrix.

.. GENERATED FROM PYTHON SOURCE LINES 10-62



.. image-sg:: /auto_examples/images/sphx_glr_plot_load_msa_001.png
   :alt: plot load msa
   :srcset: /auto_examples/images/sphx_glr_plot_load_msa_001.png
   :class: sphx-glr-single-img





.. code-block:: Python



    from cocoatree.msa import load_MSA, filter_gap_seq, filter_gap_pos, \
        seq_weights
    from cocoatree.statistics.position import aa_freq_at_pos, background_freq
    from cocoatree.statistics.pairwise import aa_joint_freq, compute_sca_matrix, \
        compute_seq_identity
    from cocoatree.deconvolution import eigen_decomp, compute_ica
    import matplotlib.pyplot as plt


    seq_id, sequences = load_MSA("data/s1Ahalabi_1470.an", format="fasta")
    Npos, Nseq = len(sequences[0]), len(sequences)

    # Filter overly gapped positions
    filt_seqs, pos_kept = filter_gap_pos(sequences, threshold=0.4)

    # Filter overly gapped sequences
    seq_id_kept, seq_kept = filter_gap_seq(seq_id, filt_seqs, threshold=0.2,
                                           filtrefseq=False)

    # Compute matrix of pairwise sequence identity
    sim_matrix = compute_seq_identity(seq_kept)

    # Compute sequence weights
    weights, Neff = seq_weights(sim_matrix)

    # compute allele frequencies
    aa_freq = aa_freq_at_pos(seq_kept, lambda_coef=0.03, weights=weights)
    # Compute background frequencies
    qa = background_freq(aa_freq)
    # Compute joint allele frequencies
    fijab, fijab_ind = aa_joint_freq(seq_kept, weights=weights, lambda_coef=0.03)

    # Compute the SCA coevolution matrix
    Cijab_raw, Cij = compute_sca_matrix(joint_freqs=fijab,
                                        joint_freqs_ind=fijab_ind,
                                        aa_freq=aa_freq,
                                        qa=qa)

    # Decomposition of the matrix into principal components
    eigenvalues, eigenvectors = eigen_decomp(Cij)

    # Plot distribution of eigenvalues
    plt.figure()
    plt.hist(eigenvalues, bins=100, color="black")
    plt.ylabel('Number')
    plt.xlabel('Eigenvalue')
    plt.show()

    # Independent component analysis (ICA)
    Vica, W = compute_ica(eigenvectors, kmax=6, learnrate=0.1, iterations=100000)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.403 seconds)


.. _sphx_glr_download_auto_examples_plot_load_msa.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/tree-timc/cocoatree/gh-pages?urlpath=lab/tree/notebooks/auto_examples/plot_load_msa.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_load_msa.ipynb <plot_load_msa.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_load_msa.py <plot_load_msa.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_load_msa.zip <plot_load_msa.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
