
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_sca_vs_mi.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_sca_vs_mi.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_sca_vs_mi.py:


=============================
Mutual information versus SCA
=============================

In this example, we are comparing the results of the co-evolution analysis on
serine proteases using SCA and the mutual information.

.. GENERATED FROM PYTHON SOURCE LINES 9-23

.. code-block:: Python


    from cocoatree.datasets import load_S1A_serine_proteases
    from cocoatree.msa import filter_gap_seq, filter_gap_pos
    from cocoatree.statistics.position import aa_freq_at_pos, \
        compute_background_frequencies

    from cocoatree.statistics.sequence import compute_seq_weights
    from cocoatree.statistics.pairwise import aa_joint_freq, compute_sca_matrix, \
        compute_seq_identity
    from cocoatree.statistics.pairwise import compute_mutual_information_matrix

    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 24-28

Load the dataset
----------------

We start by importing the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 28-34

.. code-block:: Python


    serine_dataset = load_S1A_serine_proteases()
    seq_id = serine_dataset["sequence_ids"]
    sequences = serine_dataset["alignment"]
    n_pos, n_seq = len(sequences[0]), len(sequences)








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Filtering of the multiple sequence alignment
--------------------------------------------

We are going to filter and clean the MSA

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: Python

    filt_seqs, pos_kept = filter_gap_pos(sequences, threshold=0.4)
    seq_id_kept, seq_kept = filter_gap_seq(seq_id, filt_seqs, threshold=0.2,
                                           filtrefseq=False)








.. GENERATED FROM PYTHON SOURCE LINES 44-46

Compute the SCA matrix
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 46-57

.. code-block:: Python


    sim_matrix = compute_seq_identity(seq_kept)
    weights, n_eff_seq = compute_seq_weights(sim_matrix)
    aa_freq = aa_freq_at_pos(seq_kept, lambda_coef=0.03, weights=weights)
    background_frequencies = compute_background_frequencies(aa_freq)
    fijab, fijab_ind = aa_joint_freq(seq_kept, weights=weights, lambda_coef=0.03)
    Cijab_raw, sca = compute_sca_matrix(joint_freqs=fijab,
                                        joint_freqs_ind=fijab_ind,
                                        aa_freq=aa_freq,
                                        background_freq=background_frequencies)








.. GENERATED FROM PYTHON SOURCE LINES 58-60

Compute the Mutual information matrix
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python

    normalized_mi = compute_mutual_information_matrix(seq_kept)
    mi = compute_mutual_information_matrix(seq_kept, normalize=False)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Compare MI versus SCA

.. GENERATED FROM PYTHON SOURCE LINES 65-79

.. code-block:: Python



    fig, axes = plt.subplots(ncols=3, figsize=(8, 4), tight_layout=True)
    ax = axes[0]
    ax.matshow(sca)
    ax.set_title("SCA matrix")

    ax = axes[1]
    ax.matshow(normalized_mi)
    ax.set_title("Normalized Mutual Information")

    ax = axes[2]
    ax.matshow(mi)
    ax.set_title("Mutual Information")



.. image-sg:: /auto_examples/images/sphx_glr_plot_sca_vs_mi_001.png
   :alt: SCA matrix, Normalized Mutual Information, Mutual Information
   :srcset: /auto_examples/images/sphx_glr_plot_sca_vs_mi_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.1126574764197612, 'Mutual Information')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.917 seconds)


.. _sphx_glr_download_auto_examples_plot_sca_vs_mi.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/tree-timc/cocoatree/gh-pages?urlpath=lab/tree/notebooks/auto_examples/plot_sca_vs_mi.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sca_vs_mi.ipynb <plot_sca_vs_mi.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sca_vs_mi.py <plot_sca_vs_mi.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sca_vs_mi.zip <plot_sca_vs_mi.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
