
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_full_SCA_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_full_SCA_analysis.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_full_SCA_analysis.py:


============================================================
Perform full SCA analysis on the S1A serine protease dataset
============================================================

This example shows the full process to perform a complete coevolution
analysis in order to detect protein sectors from data importation, MSA
filtering, computation of positional and joint amino acid frequencies,
and computation of the SCA coevolution matrix.

The matrix is then decomposed into principal components and independent
component analysis is performed.

In the end, we export a fasta file of the residues contributing to the first
independent component.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: Python


    # Author: Margaux Jullien <margaux.jullien@univ-grenoble-alpes.fr>
    #         Nelle Varoquaux <nelle.varoquaux@univ-grenoble-alpes.fr>
    #         Ivan Junier <ivan.junier@univ-grenoble-alpes.fr>
    # License: TBD








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Import necessary

.. GENERATED FROM PYTHON SOURCE LINES 26-40

.. code-block:: Python

    from cocoatree.datasets import load_S1A_serine_proteases
    from cocoatree.io import export_fasta, load_pdb, export_sector_for_pymol
    from cocoatree.msa import filter_sequences, compute_seq_identity, \
        compute_seq_weights, map_to_pdb
    from cocoatree.statistics.position import compute_conservation
    from cocoatree.statistics.pairwise import compute_sca_matrix

    from cocoatree.deconvolution import eigen_decomp, compute_ica, \
        choose_num_components, extract_positions_from_IC
    from cocoatree.randomize import randomization
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 41-47

Load the dataset
----------------

We start by importing the dataset. In this case, we can directly load the S1
serine protease dataset provided in :mod:`cocoatree`. To work on your on
dataset, you can use the `cocoatree.io.load_msa` function.

.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: Python


    serine_dataset = load_S1A_serine_proteases()
    seq_id = serine_dataset["sequence_ids"]
    sequences = serine_dataset["alignment"]
    n_pos, n_seq = len(sequences[0]), len(sequences)

    print(f"The loaded MSA has {n_seq} sequences and {n_pos} positions.")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The loaded MSA has 6970 sequences and 296 positions.




.. GENERATED FROM PYTHON SOURCE LINES 55-61

MSA filtering
-------------

We are going to clean a bit the loaded MSA by filtering both sequences and
positions.


.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: Python


    seq_id_kept, seq_kept, pos_kept = filter_sequences(
        seq_id, sequences, gap_threshold=0.4, seq_threshold=0.2)
    n_pos_kept = len(pos_kept)
    print(f"After filtering, we have {n_pos_kept} remaining positions.")
    print(f"After filtering, we have {len(seq_kept)} remaining sequences.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    After filtering, we have 226 remaining positions.
    After filtering, we have 6965 remaining sequences.




.. GENERATED FROM PYTHON SOURCE LINES 69-71

Compute the matrix of pairwise sequence identity
------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: Python


    sim_matrix = compute_seq_identity(seq_kept)

    fig, ax = plt.subplots()
    m = ax.imshow(sim_matrix, vmin=0, vmax=1, cmap='inferno')
    ax.set_xlabel("sequences", fontsize=10)
    ax.set_ylabel("sequences", fontsize=10)
    ax.set_title('Matrix of pairwise sequence identity', fontweight="bold")
    cb = fig.colorbar(m)
    cb.set_label("Pairwise sequence identity", fontweight="bold")




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_001.png
   :alt: Matrix of pairwise sequence identity
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-84

Compute sequence weights

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python

    seq_weights, m_eff = compute_seq_weights(seq_kept)
    print(f"Number of effective sequences {m_eff}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of effective sequences 1205.7209863932837




.. GENERATED FROM PYTHON SOURCE LINES 88-90

Compute conservation along the MSA
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: Python

    Di = compute_conservation(seq_kept, seq_weights)

    fig, ax = plt.subplots(figsize=(9, 4))
    xvals = [i+1 for i in range(len(Di))]
    xticks = [0, 50, 100, 150, 200, 250]
    ax.bar(xvals, Di, color='k')
    plt.tick_params(labelsize=11)
    ax.set_xticks(xticks)
    ax.set_xlabel('Residue position', fontsize=14)
    ax.set_ylabel('Di', fontsize=14)




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_002.png
   :alt: plot full SCA analysis
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(72.97222222222221, 0.5, 'Di')



.. GENERATED FROM PYTHON SOURCE LINES 102-104

Compute the SCA coevolution matrix
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 104-115

.. code-block:: Python


    SCA_matrix = compute_sca_matrix(seq_kept, seq_weights)

    fig, ax = plt.subplots()
    im = ax.imshow(SCA_matrix, vmin=0, vmax=1.4, cmap='inferno')

    ax.set_xlabel('Residue', fontsize=10)
    ax.set_ylabel(None)
    ax.set_title('Coevolution matrix')
    fig.colorbar(im, shrink=0.7)




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_003.png
   :alt: Coevolution matrix
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7fc818356790>



.. GENERATED FROM PYTHON SOURCE LINES 116-118

Decomposition of the matrix into principal components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    eigenvalues, eigenvectors = eigen_decomp(SCA_matrix)








.. GENERATED FROM PYTHON SOURCE LINES 122-123

Plot distribution of eigenvalues

.. GENERATED FROM PYTHON SOURCE LINES 123-128

.. code-block:: Python

    fig, ax = plt.subplots()
    ax.hist(eigenvalues, bins=100, color="black")
    ax.set_ylabel('Number', fontweight="bold")
    ax.set_xlabel('Eigenvalue', fontweight="bold")




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_004.png
   :alt: plot full SCA analysis
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 23.52222222222222, 'Eigenvalue')



.. GENERATED FROM PYTHON SOURCE LINES 129-137

Select number of significant components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A randomization strategy is used in order to select the number of components.
The function `cocoatree.randomize.randomization` runs the full SCA
pipeline on randomized version of the MSA. Make sure that weights and lambda
coefficient are set the same way as the when performing the analysis on the
real dataset.

.. GENERATED FROM PYTHON SOURCE LINES 137-155

.. code-block:: Python

    if False:
        v_rand, l_rand = randomization(seq_kept, n_rep=10,
                                       seq_weights=seq_weights, kmax=10)
        n_components = choose_num_components(eigenvalues, l_rand)
        print('n_components = ' + str(n_components))

        hist0, bins = np.histogram(l_rand.flatten(), bins=n_pos_kept,
                                   range=(0, eigenvalues.max()))
        hist1, bins = np.histogram(eigenvalues, bins=n_pos_kept,
                                   range=(0, eigenvalues.max()))

        fig, ax = plt.subplots()
        ax.bar(bins[:-1], hist1, np.diff(bins), color='k')
        ax.plot(bins[:-1], hist0/10, 'r', linewidth=3)
        ax.set_xlabel('Eigenvalues', fontweight="bold")
        ax.set_ylabel('Numbers', fontweight="bold")
    n_components = 7








.. GENERATED FROM PYTHON SOURCE LINES 156-158

Independent component analysis (ICA)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 158-184

.. code-block:: Python


    independent_components, W = compute_ica(
        eigenvectors, kmax=n_components, learnrate=0.1,
        iterations=100000)

    # Plot results
    if n_components % 2 != 0:
        print('Uneven number of axes, discard the last one for visual \
              representation')
        n_components -= 1

    pairs = [[x, x+1] for x in range(0, n_components, 2)]
    ncols = len(pairs)
    plt.rcParams['figure.figsize'] = 14, 8
    fig, axes = plt.subplots(nrows=2, ncols=len(pairs), tight_layout=True)
    for k, [k1, k2] in enumerate(pairs):
        ax = axes[0, k]
        ax.plot(eigenvectors[:, k1], eigenvectors[:, k2], 'ok')
        ax.set_xlabel("eigenvector %i" % (k1+1), fontsize=16)
        ax.set_ylabel("eigenvector %i" % (k2+1), fontsize=16)

        ax = axes[1, k]
        ax.plot(independent_components[:, k1], independent_components[:, k2], 'ok')
        ax.set_xlabel("independent component %i" % (k1+1), fontsize=16)
        ax.set_ylabel("independent component %i" % (k2+1), fontsize=16)




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_005.png
   :alt: plot full SCA analysis
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Uneven number of axes, discard the last one for visual           representation




.. GENERATED FROM PYTHON SOURCE LINES 185-186

Select residues that significantly contribute to each independent component

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: Python

    ics, icsize, sortedpos, cutoff, scaled_pdf, all_fits = \
        extract_positions_from_IC(independent_components, n_components, SCA_matrix,
                                  p_cut=0.95)

    print(f"Sizes of the {n_components} ICs: {icsize}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sizes of the 6 ICs: [15, 16, 22, 10, 13, 15]




.. GENERATED FROM PYTHON SOURCE LINES 193-197

Plot coevolution within and between the sectors
Each white square corresponds to a sector, with the residues ordered in
decreasing contribution to the independent component associated from top to
bottom and from left to right.

.. GENERATED FROM PYTHON SOURCE LINES 197-212

.. code-block:: Python

    fig, ax = plt.subplots(tight_layout=True)
    im = ax.imshow(SCA_matrix[np.ix_(sortedpos, sortedpos)], vmin=0, vmax=2,
                   interpolation='none', aspect='equal',
                   extent=[0, sum(icsize), 0, sum(icsize)], cmap='inferno')
    cb = fig.colorbar(im)
    cb.set_label("Coevolution measure")

    line_index = 0
    for i in range(n_components):
        ax.plot([line_index + icsize[i], line_index + icsize[i]],
                [0, sum(icsize)], 'w', linewidth=2)
        ax.plot([0, sum(icsize)], [sum(icsize) - line_index,
                                   sum(icsize) - line_index], 'w', linewidth=2)
        line_index += icsize[i]




.. image-sg:: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_006.png
   :alt: plot full SCA analysis
   :srcset: /auto_examples/images/sphx_glr_plot_full_SCA_analysis_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 213-216

Export fasta files of the sectors for all the sequences
Those fasta can then be used for visualization along a phylogenetic tree
as implemented in the cocoatree.visualization module

.. GENERATED FROM PYTHON SOURCE LINES 216-243

.. code-block:: Python


    sector_1_pos = list(pos_kept[ics[0].items])
    sector_1 = []
    for sequence in range(len(seq_id)):
        seq = ''
        for pos in sector_1_pos:
            seq += sequences[sequence][pos]
        sector_1.append(seq)

    export_fasta(sector_1, seq_id, 'sector_1.fasta')

    # %
    # Export files necessary for Pymol visualization
    # Load PDB file of rat's trypsin
    pdb_seq, pdb_pos = load_pdb('data/3TGI.pdb', pdb_id='TRIPSIN', chain='E')
    # Map PDB positions on the MSA sequence corresponding to rat's trypsin:
    # seq_id='14719441'
    pdb_mapping = map_to_pdb(pdb_seq, pdb_pos, sequences, seq_id,
                             ref_seq_id='14719441')
    # Export lists of the first sector positions and each residue's contribution
    # to the independent component to use for visualization on Pymol.
    # The residues are ordered in the list by decreasing contribution score (the
    # first residue in the list is the highest contributing)
    export_sector_for_pymol(pdb_mapping, independent_components, axis=0,
                            sector_pos=sector_1_pos,
                            ics=ics,
                            outpath='color_sector_1_pymol.npy')




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/Bio/PDB/StructureBuilder.py:100: PDBConstructionWarning: WARNING: Chain E is discontinuous at line 2569.
      warnings.warn(
    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/Bio/PDB/StructureBuilder.py:100: PDBConstructionWarning: WARNING: Chain I is discontinuous at line 2570.
      warnings.warn(
    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/Bio/PDB/StructureBuilder.py:100: PDBConstructionWarning: WARNING: Chain E is discontinuous at line 2580.
      warnings.warn(
    /opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/Bio/PDB/StructureBuilder.py:100: PDBConstructionWarning: WARNING: Chain I is discontinuous at line 2758.
      warnings.warn(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.440 seconds)


.. _sphx_glr_download_auto_examples_plot_full_SCA_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/tree-timc/cocoatree/gh-pages?urlpath=lab/tree/notebooks/auto_examples/plot_full_SCA_analysis.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_full_SCA_analysis.ipynb <plot_full_SCA_analysis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_full_SCA_analysis.py <plot_full_SCA_analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_full_SCA_analysis.zip <plot_full_SCA_analysis.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
